# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# extends:
#   template: simple-template.yml
#   parameters:
#     yesNo: true

# trigger:
#   branches:
#     include:
#       - master
#       - release/*

# pool:
#   vmImage: ubuntu-latest
  
# steps:
#   - template: simple-template.yml



# jobs:
# - job: myAJob
#   pool:
#     vmImage: ubuntu-latest
  
#   steps:
#     - bash: echo "hello A"

# - job: myBJob
#   pool:
#     vmImage: ubuntu-latest
  
#   steps:
#     - bash: echo "hello B"



# stages:
# - stage: stageA
#   jobs:
#     - job: jobA
#       steps:
#         -  script: echo "stageA jobA"
#     - job: jobB
#       steps:
#         - script: echo "stageA jobB"

# - stage: stageB
#   jobs:
#     - job: jobA
#       steps:
#         - script: echo "stageB jobA"
#     - job: jobB
#       steps:
#         - script: echo "stageB jobB"



# jobs:
#   - job: Debug
#     steps:
#       - script: echo hello from the debug build
#   - job: Release
#     dependsOn: Debug
#     steps:
#       - script: echo hello from the release build



stages:
- stage: stageA
  jobs:
    - job: InitialA
      steps:
        -  script: echo "stageA InitialA"
    - job: InitialB
      steps:
        - script: echo "stageA InitialB"

- stage: stageB
  jobs:
    - job: Subsequent
      dependsOn:
        - InitialA
        - InitialB
      steps:
        - script: echo "stageB Subsequent"



# jobs:
# - job: A
#   steps:
#   - script: echo hello

# - job: B
#   dependsOn: A
#   condition: and(succeeded(), eq(variables['build.sourceBranch'], 'master'))
#   steps:
#   - script: echo this only runs for master



# # 模板表示式和宏表达式的区别
# variables:
# - name: one
#   value: initialValue 

# steps:
#   - script: |
#       echo ${{ variables.one }} # outputs initialValue
#       echo $(one)
#     displayName: First variable pass
#   - bash: echo "##vso[task.setvariable variable=one]secondValue"
#     displayName: Set new variable value
#   - script: |
#       echo ${{ variables.one }} # outputs initialValue
#       echo $(one) # outputs secondValue
#     displayName: Second variable pass


# # 测试宏语法
# variables:
#  - name: projectName
#    value: contoso

# steps: 
# - bash: echo $(projectName)
# - powershell: echo $(projectName)
# - script: echo $(projectName)



# # Set variables once
# variables:
#   configuration: debug
#   platform: x64

# steps:

# # Use them once
# - task: MSBuild@1
#   inputs:
#     solution: solution1.sln
#     configuration: $(configuration) # Use the variable
#     platform: $(platform)

# # Use them again
# - task: MSBuild@1
#   inputs:
#     solution: solution2.sln
#     configuration: $(configuration) # Use the variable
#     platform: $(platform)


# # 测试变量scope
# variables:
#   global_variable: value    # this is available to all jobs

# jobs:
# - job: job1
#   pool:
#     vmImage: 'ubuntu-latest'
#   variables:
#     job_variable1: value1    # this is only available in job1
#   steps:
#   - bash: echo $(global_variable)
#   - bash: echo $(job_variable1)
#   - bash: echo $JOB_VARIABLE1 # variables are available in the script environment too

# - job: job2
#   pool:
#     vmImage: 'ubuntu-latest'
#   variables:
#     job_variable2: value2    # this is only available in job2
#   steps:
#   - bash: echo $(global_variable)
#   - bash: echo $(job_variable2)
#   - bash: echo $(job_variable1)
#   - bash: echo $GLOBAL_VARIABLE


# #设置秘密变量
# variables:
#  GLOBAL_MYSECRET: $(mySecret) # this will not work because the secret variable needs to be mapped as env
#  GLOBAL_MY_MAPPED_ENV_VAR: $(nonSecretVariable) # this works because it's not a secret.

# steps:

# - powershell: |
#     Write-Host "Using an input-macro works: $(mySecret)"
#     Write-Host "Using the env var directly does not work: $env:MYSECRET"
#     Write-Host "Using a global secret var mapped in the pipeline does not work either: $env:GLOBAL_MYSECRET"
#     Write-Host "Using a global non-secret var mapped in the pipeline works: $env:GLOBAL_MY_MAPPED_ENV_VAR" 
#     Write-Host "Using the mapped env var for this task works and is recommended: $env:MY_MAPPED_ENV_VAR"
#   env:
#     MY_MAPPED_ENV_VAR: $(mySecret) # the recommended way to map to an env variable

# - bash: 
#   env:
#     MY_MAPPED_ENV_VAR: $(mySecret) # the recommended way to map to an env variable

# - script: echo $(mySecret),$GLOBAL_MY_MAPPED_ENV_VAR



# # 测试变量组中的秘密变量
# variables: 
# - group: 'my-var-group' # variable group
# - name: 'devopsAccount' # new variable defined in YAML
#   value: 'contoso'
# - name: 'projectName' # new variable defined in YAML
#   value: 'contosoads'

# steps:
# - task: PowerShell@2
#   inputs:
#     targetType: 'inline'
#     script: |
#         # Encode the Personal Access Token (PAT)
#         # $env:USER is a normal variable in the variable group
#         # $env:MY_MAPPED_TOKEN is a mapped secret variable
#         $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $env:USER,$env:MY_MAPPED_TOKEN)))

#         # Get a list of releases
#         $uri = "https://vsrm.dev.azure.com/$(devopsAccount)/$(projectName)/_apis/release/releases?api-version=5.1"

#         # Invoke the REST call
#         $result = Invoke-RestMethod -Uri $uri -Method Get -ContentType "application/json" -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)}

#         # Output releases in JSON
#         Write-Host $result.value
#   env:
#     MY_MAPPED_TOKEN: $(token) # Maps the secret variable $(token) from my-var-group



# #测试变量组
# variables:
# - group: my-variable-group
# - name: my-passed-variable
#   value: $[variables.myhello] # uses runtime expression

# steps:
# - script: echo $(myhello) # uses macro syntax
# - script: echo $(my-passed-variable)



# jobs:
# - job: A
#   steps:
#   # assume that MyTask generates an output variable called "MyVar"
#   # (you would learn that from the task's documentation)
#   - task: MyTask@1
#     name: ProduceVar  # because we're going to depend on it, we need to name the step
# - job: B
#   dependsOn: A
#   variables:
#     # map the output variable from A into this job
#     varFromA: $[ dependencies.A.outputs['ProduceVar.MyVar'] ]
#   steps:
#   - script: echo $(varFromA) # this step uses the mapped-in variable

# steps:
# # Create a variable
# - bash: |
#     echo "##vso[task.setvariable variable=sauce]crushed tomatoes" # remember to use double quotes

# # Use the variable
# # "$(sauce)" is replaced by the contents of the `sauce` variable by Azure Pipelines
# # before handing the body of the script to the shell.
# - bash: |
#     echo my pipeline variable is $(sauce)