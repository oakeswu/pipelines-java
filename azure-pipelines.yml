# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# extends:
#   template: simple-template.yml
#   parameters:
#     yesNo: true

# trigger:
#   branches:
#     include:
#       - master
#       - release/*

# pool:
#   vmImage: ubuntu-latest
  
# steps:
#   - template: simple-template.yml



# jobs:
# - job: myAJob
#   pool:
#     vmImage: ubuntu-latest
  
#   steps:
#     - bash: echo "hello A"

# - job: myBJob
#   pool:
#     vmImage: ubuntu-latest
  
#   steps:
#     - bash: echo "hello B"



# stages:
# - stage: stageA
#   jobs:
#     - job: jobA
#       steps:
#         -  script: echo "stageA jobA"
#     - job: jobB
#       steps:
#         - script: echo "stageA jobB"

# - stage: stageB
#   jobs:
#     - job: jobA
#       steps:
#         - script: echo "stageB jobA"
#     - job: jobB
#       steps:
#         - script: echo "stageB jobB"



# jobs:
#   - job: Debug
#     steps:
#       - script: echo hello from the debug build
#   - job: Release
#     dependsOn: Debug
#     steps:
#       - script: echo hello from the release build



# stages:
# - stage: stageA
#   jobs:
#     - job: InitialA
#       steps:
#         -  script: echo "stageA InitialA"
#     - job: InitialB
#       steps:
#         - script: echo "stageA InitialB"

# - stage: stageB
#   jobs:
#     - job: Subsequent
#       dependsOn:
#         - InitialA
#         - InitialB
#       steps:
#         - script: echo "stageB Subsequent"



# jobs:
# - job: A
#   steps:
#   - script: echo hello

# - job: B
#   dependsOn: A
#   condition: and(succeeded(), eq(variables['build.sourceBranch'], 'master'))
#   steps:
#   - script: echo this only runs for master



# # 模板表示式和宏表达式的区别
# variables:
# - name: one
#   value: initialValue 

# steps:
#   - script: |
#       echo ${{ variables.one }} # outputs initialValue
#       echo $(one)
#     displayName: First variable pass
#   - bash: echo "##vso[task.setvariable variable=one]secondValue"
#     displayName: Set new variable value
#   - script: |
#       echo ${{ variables.one }} # outputs initialValue
#       echo $(one) # outputs secondValue
#     displayName: Second variable pass


# # 测试宏语法
# variables:
#  - name: projectName
#    value: contoso

# steps: 
# - bash: echo $(projectName)
# - powershell: echo $(projectName)
# - script: echo $(projectName)



# # Set variables once
# variables:
#   configuration: debug
#   platform: x64

# steps:

# # Use them once
# - task: MSBuild@1
#   inputs:
#     solution: solution1.sln
#     configuration: $(configuration) # Use the variable
#     platform: $(platform)

# # Use them again
# - task: MSBuild@1
#   inputs:
#     solution: solution2.sln
#     configuration: $(configuration) # Use the variable
#     platform: $(platform)


# 测试变量scope
variables:
  global_variable: value    # this is available to all jobs

jobs:
- job: job1
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    job_variable1: value1    # this is only available in job1
  steps:
  - bash: echo $(global_variable)
  - bash: echo $(job_variable1)
  - bash: echo $JOB_VARIABLE1 # variables are available in the script environment too

- job: job2
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    job_variable2: value2    # this is only available in job2
  steps:
  - bash: echo $(global_variable)
  - bash: echo $(job_variable2)
  - bash: echo $GLOBAL_VARIABLE